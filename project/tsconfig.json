{
  "compilerOptions": {
    /* このファイルについての詳細は https://aka.ms/tsconfig をご覧ください */
    /* プロジェクト */
    // "incremental": true,                              /* プロジェクトのインクリメンタルコンパイルを可能にする.tsbuildinfoファイルを保存します。 */
    // "composite": true,                                /* プロジェクト参照を使用するTypeScriptプロジェクトを可能にする制約を有効にします。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* インクリメンタルコンパイルファイルの.tsbuildinfoへのパスを指定します。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 複合プロジェクトを参照する際に、宣言ファイルではなくソースファイルを優先することを無効にします。 */
    // "disableSolutionSearching": true,                 /* 編集時のマルチプロジェクト参照チェックからプロジェクトを除外します。 */
    // "disableReferencedProjectLoad": true,             /* TypeScriptによって自動的に読み込まれるプロジェクトの数を減らします。 */

    /* 言語と環境 */
    "target": "es2016", /* 出力されるJavaScriptのバージョンを設定し、対応するライブラリ宣言を含めます。 */
    // "lib": [],                                        /* 対象のランタイム環境を記述するバンドルされたライブラリ宣言ファイルのセットを指定します。 */
    // "jsx": "preserve",                                /* 生成されるJSXコードを指定します。 */
    // "experimentalDecorators": true,                   /* レガシーな実験的デコレータのサポートを有効にします。 */
    // "emitDecoratorMetadata": true,                    /* ソースファイル内の装飾された宣言のデザインタイプメタデータを出力します。 */
    // "jsxFactory": "",                                 /* React JSX出力をターゲットにする際に使用されるJSXファクトリ関数を指定します（例：'React.createElement'や'h'）。 */
    // "jsxFragmentFactory": "",                         /* React JSX出力をターゲットにする際にフラグメントに使用される参照を指定します（例：'React.Fragment'や'Fragment'）。 */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'を使用する際にJSXファクトリ関数をインポートするために使用されるモジュール指定子を指定します。 */
    // "reactNamespace": "",                             /* 'createElement'を呼び出すオブジェクトを指定します。これは'react' JSX出力をターゲットにする場合のみ適用されます。 */
    // "noLib": true,                                    /* デフォルトのlib.d.tsを含むすべてのライブラリファイルの組み込みを無効にします。 */
    // "useDefineForClassFields": true,                  /* ECMAScript標準に準拠したクラスフィールドを出力します。 */
    // "moduleDetection": "auto",                        /* モジュール形式のJSファイルを検出する方法を制御します。 */

    /* モジュール */
    "module": "commonjs", /* 生成されるモジュールコードを指定します。 */
    // "rootDir": "./",                                  /* ソースファイル内のルートフォルダを指定します。 */
    // "moduleResolution": "node10",                     /* TypeScriptが与えられたモジュール指定子からファイルを検索する方法を指定します。 */
    // "baseUrl": "./",                                  /* 非相対モジュール名を解決するためのベースディレクトリを指定します。 */
    // "paths": {},                                      /* 追加の検索場所にインポートを再マップするエントリのセットを指定します。 */
    // "rootDirs": [],                                   /* モジュールを解決する際に複数のフォルダを1つとして扱うことを許可します。 */
    // "typeRoots": [],                                  /* './node_modules/@types'のように動作する複数のフォルダを指定します。 */
    // "types": [],                                      /* ソースファイルで参照されていなくても含める型パッケージ名を指定します。 */
    // "allowUmdGlobalAccess": true,                     /* モジュールからUMDグローバルへのアクセスを許可します。 */
    // "moduleSuffixes": [],                             /* モジュールを解決する際に検索するファイル名の接尾辞のリストです。 */
    // "allowImportingTsExtensions": true,               /* TypeScriptファイル拡張子を含むインポートを許可します。'--moduleResolution bundler'と'--noEmit'または'--emitDeclarationOnly'の設定が必要です。 */
    // "resolvePackageJsonExports": true,                /* パッケージインポートを解決する際にpackage.jsonの'exports'フィールドを使用します。 */
    // "resolvePackageJsonImports": true,                /* インポートを解決する際にpackage.jsonの'imports'フィールドを使用します。 */
    // "customConditions": [],                           /* インポートを解決する際にリゾルバ固有のデフォルトに加えて設定する条件です。 */
    // "noUncheckedSideEffectImports": true,             /* サイドエフェクトインポートをチェックします。 */
    // "resolveJsonModule": true,                        /* .jsonファイルのインポートを有効にします。 */
    // "allowArbitraryExtensions": true,                 /* 宣言ファイルが存在する場合、任意の拡張子を持つファイルのインポートを有効にします。 */
    // "noResolve": true,                                /* TypeScriptがプロジェクトに追加すべきファイル数を増やす'import'、'require'、'<reference>'の展開を禁止します。 */

    /* JavaScript サポート */
    // "allowJs": true,                                  /* JavaScriptファイルをプログラムの一部として許可します。'checkJS'オプションを使用してこれらのファイルからエラーを取得します。 */
    // "checkJs": true,                                  /* 型チェックされたJavaScriptファイルでのエラー報告を有効にします。 */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'からJavaScriptファイルをチェックする際の最大フォルダ深度を指定します。'allowJs'との併用時のみ適用されます。 */

    /* 出力 */
    // "declaration": true,                              /* プロジェクト内のTypeScriptおよびJavaScriptファイルから.d.tsファイルを生成します。 */
    // "declarationMap": true,                           /* d.tsファイル用のソースマップを作成します。 */
    // "emitDeclarationOnly": true,                      /* JavaScriptファイルではなく.d.tsファイルのみを出力します。 */
    // "sourceMap": true,                                /* 出力されたJavaScriptファイル用のソースマップファイルを作成します。 */
    // "inlineSourceMap": true,                          /* 出力されたJavaScript内にソースマップファイルを含めます。 */
    // "noEmit": true,                                   /* コンパイルからのファイル出力を無効にします。 */
    // "outFile": "./",                                  /* すべての出力を1つのJavaScriptファイルにバンドルするファイルを指定します。'declaration'がtrueの場合、すべての.d.ts出力をバンドルするファイルも指定します。 */
    // "outDir": "./",                                   /* すべての出力ファイルの出力フォルダを指定します。 */
    // "removeComments": true,                           /* コメントの出力を無効にします。 */
    // "importHelpers": true,                            /* ヘルパー関数をファイルごとに含めるのではなく、tslibからプロジェクトごとに一度インポートすることを許可します。 */
    // "downlevelIteration": true,                       /* イテレーションのためにより準拠した、しかし冗長で性能の劣るJavaScriptを出力します。 */
    // "sourceRoot": "",                                 /* デバッガーが参照元コードを見つけるためのルートパスを指定します。 */
    // "mapRoot": "",                                    /* 生成された場所の代わりにデバッガーがマップファイルを配置すべき場所を指定します。 */
    // "inlineSources": true,                            /* 出力されたJavaScript内のソースマップにソースコードを含めます。 */
    // "emitBOM": true,                                  /* 出力ファイルの先頭にUTF-8バイトオーダーマーク（BOM）を出力します。 */
    // "newLine": "crlf",                                /* ファイル出力時の改行文字を設定します。 */
    // "stripInternal": true,                            /* JSDocコメントに'@internal'を持つ宣言の出力を無効にします。 */
    // "noEmitHelpers": true,                            /* コンパイル出力で'__extends'などのカスタムヘルパー関数の生成を無効にします。 */
    // "noEmitOnError": true,                            /* 型チェックエラーが報告された場合のファイル出力を無効にします。 */
    // "preserveConstEnums": true,                       /* 生成されたコードで'const enum'宣言の消去を無効にします。 */
    // "declarationDir": "./",                           /* 生成された宣言ファイルの出力ディレクトリを指定します。 */

    /* 相互運用性の制約 */
    // "isolatedModules": true,                          /* 各ファイルが他のインポートに依存せずに安全にトランスパイルできることを保証します。 */
    // "verbatimModuleSyntax": true,                     /* 型専用としてマークされていないインポートまたはエクスポートを変換または省略せず、'module'設定に基づいて出力ファイルの形式で書き込むことを保証します。 */
    // "isolatedDeclarations": true,                     /* 他のツールが容易に宣言ファイルを生成できるよう、エクスポートに十分なアノテーションを要求します。 */
    // "allowSyntheticDefaultImports": true,             /* モジュールがデフォルトエクスポートを持たない場合でも'import x from y'を許可します。 */
    "esModuleInterop": true, /* CommonJSモジュールのインポートをサポートするための追加のJavaScriptを出力します。型互換性のために'allowSyntheticDefaultImports'を有効にします。 */
    // "preserveSymlinks": true,                         /* シンボリックリンクの実際のパスへの解決を無効にします。これはnodeの同じフラグに対応します。 */
    "forceConsistentCasingInFileNames": true, /* インポートでの大文字小文字の一致を保証します。 */

    /* 型チェック */
    "strict": true, /* すべての厳格な型チェックオプションを有効にします。 */
    // "noImplicitAny": true,                            /* 暗黙的な'any'型を持つ式と宣言のエラー報告を有効にします。 */
    // "strictNullChecks": true,                         /* 型チェック時に'null'と'undefined'を考慮に入れます。 */
    // "strictFunctionTypes": true,                      /* 関数を割り当てる際、パラメータとリターン値がサブタイプ互換であることを確認します。 */
    // "strictBindCallApply": true,                      /* 'bind'、'call'、'apply'メソッドの引数が元の関数と一致することを確認します。 */
    // "strictPropertyInitialization": true,             /* 宣言されているがコンストラクタで設定されていないクラスプロパティをチェックします。 */
    // "strictBuiltinIteratorReturn": true,              /* ビルトインイテレータは'any'の代わりに'undefined'の'TReturn'型でインスタンス化されます。 */
    // "noImplicitThis": true,                           /* 'this'が'any'型を与えられた場合のエラー報告を有効にします。 */
    // "useUnknownInCatchVariables": true,               /* catch句の変数をデフォルトで'any'ではなく'unknown'とします。 */
    // "alwaysStrict": true,                             /* 'use strict'が常に出力されるようにします。 */
    // "noUnusedLocals": true,                           /* 読み取られないローカル変数のエラー報告を有効にします。 */
    // "noUnusedParameters": true,                       /* 読み取られない関数パラメータでエラーを発生させます。 */
    // "exactOptionalPropertyTypes": true,               /* オプショナルプロパティ型を'undefined'を追加するのではなく、書かれた通りに解釈します。 */
    // "noImplicitReturns": true,                            /* 関数内で明示的にreturnしないコードパスのエラー報告を有効にします。 */
    // "noFallthroughCasesInSwitch": true,               /* switch文のフォールスルーケースのエラー報告を有効にします。 */
    // "noUncheckedIndexedAccess": true,                 /* インデックスを使用してアクセスする際に型に'undefined'を追加します。 */
    // "noImplicitOverride": true,                       /* 派生クラスでオーバーライドするメンバーにoverrideモディファイアでマークされていることを保証します。 */
    // "noPropertyAccessFromIndexSignature": true,       /* インデックス型で宣言されたキーに対して、インデックスアクセサーの使用を強制します。 */
    // "allowUnusedLabels": true,                        /* 未使用のラベルのエラー報告を無効にします。 */
    // "allowUnreachableCode": true,                     /* 到達不能なコードのエラー報告を無効にします。 */

    /* 完全性 */
    // "skipDefaultLibCheck": true,                      /* TypeScriptに含まれる.d.tsファイルの型チェックをスキップします。 */
    "skipLibCheck": true /* すべての.d.tsファイルの型チェックをスキップします。 */,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "noEmit": true,
    "incremental": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}
